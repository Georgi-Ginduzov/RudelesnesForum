@model PostDetailsViewModel
@{
    ViewData["Title"] = Model.Post.Title;
}

<div class="container-fluid">
    @if (Model.ShowSubmissionNotice)
    {
        <div class="alert @(Model.IsSubmissionFlagged ? "alert-info" : "alert-success") alert-dismissible fade show mb-3" role="alert">
            <i class="fas @(Model.IsSubmissionFlagged ? "fa-info-circle" : "fa-check-circle") me-2"></i>
            <strong>Reply submitted successfully!</strong>
            @if (Model.IsSubmissionFlagged)
            {
                <small class="d-block mt-1">Your reply is currently under review and will appear once approved.</small>
            }
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/Posts" class="text-decoration-none">
                    <i class="fas fa-comments me-1"></i>Forum Posts
                </a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Post.Title</li>
        </ol>
    </nav>

    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-start flex-wrap gap-3">
                <div>
                    <h1 class="h2 mb-2">@Model.Post.Title</h1>
                    <div class="d-flex align-items-center gap-3 flex-wrap">
                        <small class="text-muted">
                            <i class="fas fa-comments me-1"></i>@Model.Post.ReplyCount replies
                        </small>
                        <small class="text-muted">
                            <i class="fas fa-clock me-1"></i>@Model.Post.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                        </small>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    @if (Model.CanEdit)
                    {
                        <a href="/Posts/@Model.Post.PostId/Edit" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-edit me-1"></i>Edit
                        </a>
                    }
                    @if (Model.CanDelete)
                    {
                        <form method="post" asp-action="Delete" asp-route-id="@Model.Post.PostId"
                              onsubmit="return confirm('Are you sure you want to delete this post?')" class="d-inline">
                            <button type="submit" class="btn btn-outline-danger btn-sm">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-9">
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="me-3">
                            <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center"
                                 style="width: 50px; height: 50px;">
                                @(Model.Post.AuthorName?.FirstOrDefault() ?? 'U')
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <div class="fw-semibold">@Model.Post.AuthorName</div>
                            <small class="text-muted">@Model.Post.AuthorEmail</small>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">
                                <i class="fas fa-clock me-1"></i>
                                Posted @Model.Post.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                            </small>
                            @if (Model.Post.LastUpdated > Model.Post.CreatedAt.AddMinutes(1))
                            {
                                <br>
                                <small class="text-muted">
                                    <i class="fas fa-edit me-1"></i>
                                    Last updated @Model.Post.LastUpdated.ToString("MMM dd, yyyy 'at' HH:mm")
                                </small>
                            }
                        </div>
                    </div>

                    <div class="post-content mb-3">
                        @Html.Raw(Model.Post.Content.Replace("\n", "<br>"))
                    </div>

                    <div class="d-flex justify-content-between align-items-center pt-3 border-top">
                        <div class="d-flex gap-3">
                            @if (User.Identity.IsAuthenticated)
                            {
                                <button class="btn btn-sm btn-outline-primary" onclick="showReplyForm()">
                                    <i class="fas fa-reply me-1"></i>Reply
                                </button>
                            }
                        </div>
                        <div>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <button class="btn btn-sm btn-outline-secondary" onclick="reportPost(@Model.Post.PostId)">
                                    <i class="fas fa-flag me-1"></i>Report
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (User.Identity.IsAuthenticated && Model.CanReply)
            {
                <div class="card shadow-sm border-0 mb-4" id="reply-form" style="display: none;">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="fas fa-reply me-2"></i>Reply to this post
                        </h5>
                    </div>
                    <div class="card-body">
                        <form method="post" action="/Posts/@Model.Post.PostId/Reply">
                            @Html.AntiForgeryToken()
                            <div class="mb-3">
                                <textarea class="form-control" name="content" rows="4"
                                      placeholder="Write your reply..." required></textarea>
                                <div class="form-text">
                                    <small class="text-muted">
                                        <i class="fas fa-shield-alt me-1"></i>
                                        All replies are reviewed to maintain a respectful community.
                                    </small>
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-paper-plane me-1"></i>Post Reply
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="hideReplyForm()">
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            }
            else if (!User.Identity.IsAuthenticated)
            {
                <div class="card shadow-sm border-0 mb-4">
                    <div class="card-body text-center py-4">
                        <i class="fas fa-lock text-muted mb-2" style="font-size: 2rem;"></i>
                        <h5 class="text-muted">Join the conversation</h5>
                        <p class="text-muted mb-3">Please log in to reply to this post</p>
                        <a href="/Identity/Account/Login" class="btn btn-primary me-2">
                            <i class="fas fa-sign-in-alt me-1"></i>Login
                        </a>
                        <a href="/Identity/Account/Register" class="btn btn-outline-primary">
                            <i class="fas fa-user-plus me-1"></i>Register
                        </a>
                    </div>
                </div>
            }

            <div class="card shadow-sm border-0">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-comments me-2"></i>
                        Replies (@Model.Post.ReplyCount)
                    </h5>
                    @if (Model.Replies.Any())
                    {
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                Sort by
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="?sortReplies=oldest">Oldest First</a></li>
                                <li><a class="dropdown-item" href="?sortReplies=newest">Newest First</a></li>
                            </ul>
                        </div>
                    }
                </div>
                <div class="card-body p-0">
                    @if (Model.Replies.Any())
                    {
                        @foreach (var reply in Model.Replies)
                        {
                            <div class="border-bottom p-4 @(reply.IsPendingReview && reply.UserId == Model.CurrentUserId ? "bg-light" : "")" id="reply-@reply.ReplyId">
                                <!-- Reply Author Info -->
                                <div class="d-flex align-items-center mb-3">
                                    <div class="me-3">
                                        <div class="bg-secondary text-white rounded-circle d-flex align-items-center justify-content-center"
                                             style="width: 40px; height: 40px;">
                                            @(reply.AuthorName?.FirstOrDefault() ?? 'U')
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-semibold">
                                            @reply.AuthorName
                                            @if (reply.UserId == Model.Post.UserId)
                                            {
                                                <span class="badge bg-primary ms-1">Author</span>
                                            }
                                            @if (reply.IsPendingReview && reply.UserId == Model.CurrentUserId)
                                            {
                                                <span class="badge bg-info text-dark ms-1">
                                                    <i class="fas fa-clock me-1"></i>Under Review
                                                </span>
                                            }
                                        </div>
                                        <small class="text-muted">@reply.AuthorEmail</small>
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted">
                                            <i class="fas fa-clock me-1"></i>
                                            @reply.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                                        </small>
                                        @if (reply.LastUpdated > reply.CreatedAt.AddMinutes(1))
                                        {
                                            <br>
                                            <small class="text-muted">
                                                <i class="fas fa-edit me-1"></i>
                                                Edited @reply.LastUpdated.ToString("MMM dd, HH:mm")
                                            </small>
                                        }
                                    </div>
                                </div>

                                <div class="reply-content mb-3 @(reply.IsPendingReview && reply.UserId == Model.CurrentUserId ? "text-muted" : "")">
                                    @Html.Raw(reply.Content.Replace("\n", "<br>"))
                                </div>

                                @if (reply.IsPendingReview && reply.UserId == Model.CurrentUserId)
                                {
                                    <div class="mb-3">
                                        <small class="text-info">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Your reply is being reviewed and will be visible to others once approved.
                                        </small>
                                    </div>
                                }

                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex gap-3">
                                        @if (reply.UserId == Model.CurrentUserId || Model.CanModerate)
                                        {
                                            <a href="/Replies/@reply.ReplyId/Edit" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-edit me-1"></i>Edit
                                            </a>
                                        }
                                        @if (reply.UserId == Model.CurrentUserId || Model.CanModerate)
                                        {
                                            <form method="post" asp-action="DeleteReply" asp-route-id="@reply.ReplyId"
                                                  onsubmit="return confirm('Are you sure you want to delete this reply?')" class="d-inline">
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="fas fa-trash me-1"></i>Delete
                                                </button>
                                            </form>
                                        }
                                    </div>
                                    <div>
                                        @if (User.Identity.IsAuthenticated)
                                        {
                                            <button class="btn btn-sm btn-outline-secondary" onclick="reportReply(@reply.ReplyId)">
                                                <i class="fas fa-flag me-1"></i>Report
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        @if (Model.ReplyPagination.TotalPages > 1)
                        {
                            <div class="p-3 border-top">
                                <nav aria-label="Replies pagination">
                                    <ul class="pagination pagination-sm justify-content-center mb-0">
                                        @if (Model.ReplyPagination.HasPrevious)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="?replyPage=@(Model.ReplyPagination.CurrentPage - 1)">
                                                    <i class="fas fa-chevron-left"></i>
                                                </a>
                                            </li>
                                        }

                                        @for (int i = Math.Max(1, Model.ReplyPagination.CurrentPage - 2); i <= Math.Min(Model.ReplyPagination.TotalPages, Model.ReplyPagination.CurrentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == Model.ReplyPagination.CurrentPage ? "active" : "")">
                                                <a class="page-link" href="?replyPage=@i">@i</a>
                                            </li>
                                        }

                                        @if (Model.ReplyPagination.HasNext)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="?replyPage=@(Model.ReplyPagination.CurrentPage + 1)">
                                                    <i class="fas fa-chevron-right"></i>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-comments text-muted mb-3" style="font-size: 3rem;"></i>
                            <h5 class="text-muted">No replies yet</h5>
                            <p class="text-muted">Be the first to reply to this post!</p>
                            @if (User.Identity.IsAuthenticated && Model.CanReply)
                            {
                                <button class="btn btn-primary" onclick="showReplyForm()">
                                    <i class="fas fa-reply me-2"></i>Write First Reply
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-3">
            <!-- Post Author Info -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-white">
                    <h6 class="mb-0">
                        <i class="fas fa-user me-2"></i>Post Author
                    </h6>
                </div>
                <div class="card-body text-center">
                    <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3"
                         style="width: 80px; height: 80px; font-size: 2rem;">
                        @(Model.Post.AuthorName?.FirstOrDefault() ?? 'U')
                    </div>
                    <h6 class="mb-1">@Model.Post.AuthorName</h6>
                    <small class="text-muted">@Model.Post.AuthorEmail</small>
                </div>
            </div>

            <!-- Post Stats -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-white">
                    <h6 class="mb-0">
                        <i class="fas fa-chart-bar me-2"></i>Post Statistics
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row g-3 text-center">
                        <div class="col-12">
                            <div class="h5 text-success mb-1">@Model.Post.ReplyCount</div>
                            <small class="text-muted">Replies</small>
                        </div>
                        <div class="col-12">
                            <div class="h6 text-info mb-1">@Model.Post.CreatedAt.ToString("MMM dd, yyyy")</div>
                            <small class="text-muted">Created</small>
                        </div>
                        @if (Model.Post.LastUpdated > Model.Post.CreatedAt.AddMinutes(1))
                        {
                            <div class="col-12">
                                <div class="h6 text-warning mb-1">@Model.Post.LastUpdated.ToString("MMM dd, yyyy")</div>
                                <small class="text-muted">Last Updated</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function showReplyForm() {
        document.getElementById('reply-form').style.display = 'block';
        document.querySelector('#reply-form textarea').focus();
    }

    function hideReplyForm() {
        document.getElementById('reply-form').style.display = 'none';
    }

    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert-success, .alert-info');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    });
</script>